name: SmartOps CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Run frontend tests with coverage
        working-directory: frontend
        run: npm run test:coverage

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Build and tag frontend Docker image
        run: |
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest your-docker-registry/frontend:latest # Pushing to registry will be a separate step

  build-and-run:
    name: Build & Run Docker Containers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images
        run: docker compose build && docker compose push

      - name: Start Docker Compose Stack
        run: docker compose up -d

  test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-run # This job now depends on the 'build-and-run' job.
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      # This is the new, more reliable way to wait for the application.
      - name: Wait for Application to be Ready
        run: |
          echo "Waiting for http://localhost:3000 to be ready..."
          timeout=60 # Maximum wait time in seconds
          start_time=$(date +%s)
          while ! curl -sSf http://localhost:3000 > /dev/null; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout: Application is not ready after $timeout seconds."
              exit 1
            fi
            echo "Still waiting... ($elapsed seconds elapsed)"
            sleep 2
          done
          echo "Application is ready!"

      - name: Run Playwright Tests with Video
        run: npx playwright test --reporter=html --output=test-results --trace on

      - name: Convert Video to GIF
        run: |
          sudo apt-get update && sudo apt-get install -y ffmpeg
          mkdir -p docs
          ffmpeg -i $(find test-results -name "*.webm" | head -n 1) \
            -vf "fps=10,scale=640:-1:flags=lanczos" docs/workflow.gif

      - name: Upload Artifacts
        # The key change is here: we've upgraded from v3 to v4.
        uses: actions/upload-artifact@v4
        with:
          name: demo-artifacts
          path: |
            test-results/
            docs/workflow.gif
