name: SmartOps CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests with coverage
        working-directory: frontend
        run: npm run test:coverage

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Build and tag frontend Docker image
        run: |
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest your-docker-registry/frontend:latest # Pushing to registry will be a separate step

  build_and_push:
    name: Build & Run Docker Containers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Compose Images
        # Explicitly build the images
        run: docker compose build

      - name: Push Docker Compose Images
        # Explicitly push the images to DockerHub
        run: docker compose push

  test_and_deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    if: success()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # This is the new, crucial step.
      - name: Create .env file from secrets
        run: |
          mkdir -p backend
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> backend/.env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> backend/.env
          echo "POSTGRES_HOST=postgres" >> backend/.env
          echo "POSTGRES_PORT=5432" >> backend/.env

      - name: Start Docker Compose Stack
        # This command starts and waits for the services to become healthy,
        # based on the health checks defined in docker-compose.yml.
        run: docker compose up --wait

      # This step will only run if the 'up --wait' command fails, giving you
      # immediate insight into why the services did not become healthy.
      - name: Print Docker Compose Logs on Failure
        if: failure()
        run: docker compose logs

      - name: Run E2E Tests
        run: |
          echo "Running End-to-End Tests..."
          # Your test command would go here.

      - name: Capture Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: ./test-results/
